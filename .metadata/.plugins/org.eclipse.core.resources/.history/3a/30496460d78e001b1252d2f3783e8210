package array;

public class Leetcode_Q493_Reverse_Pairs {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[]= new int[] {2,4,3,5,1};
		int temp[]= new int[arr.length];
		int a= mergeSort(arr,0,arr.length-1,temp);
		System.out.println(a);

	}

	private static int mergeSort(int[] arr, int l, int r, int[] temp) {
		// TODO Auto-generated method stub
		int count=0;
		if(l<r) {
			int mid= l+(r-l)/2;
			count+=mergeSort(arr,l,mid,temp);
			count+=mergeSort(arr,mid+1,r,temp);
			
			count+=merge(arr,l,mid,r,temp);
		}
		
		
		return count;
	}

	private static int merge(int[] arr, int l, int mid, int r, int[] temp) {
		// TODO Auto-generated method stub
		int count=0;
		int i=l;
		int j=mid+1;
		int k=l;
		int rightCount=j;
		/*while(i<=mid && j<=r) {
			if(arr[i] <= arr[j])
				temp[k++]=arr[i++];
			else {
				if(arr[i]>2*arr[j]) {
					temp[k++]=arr[j++];
					count+=mid-i +1;
				}
				else 
					temp[k++]=arr[j++];
				
			}
		}*/
		//2	4	6	8	10 		1	3	4
		while(i<=mid && j<=r) {
			if(arr[i] <= arr[j]) {
				if(arr[i]>2*arr[rightCount]) {
					count+=mid-i+1;
					rightCount++;
				}
				temp[k++]=arr[i++];
			}
			else {
				
					
				temp[k++]=arr[j++];
			}
				
		}
		while(i<=mid) {
			if(rightCount<=r && arr[i]>2*arr[rightCount]) {
				count+=mid-i+1;
				rightCount++;
			}
			temp[k++]=arr[i++];
		}
		while(j<=r)
			temp[k++]=arr[j++];
		for(int t=l;t<=r;t++)
			arr[t]=temp[t];
		return count;
	}

}

